━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        X680x0/Human68k *以外* での再コンパイル方法

───────────────────────────────────────

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※

　dis 3.16 より後のバージョンアップ作業において、ports/ ディレクトリ内の
Makefile の書き換えが行われていません。クロスコンパイル時は適宜修正をお願いし
ます。

　また、各環境での再コンパイルも行っていないため、それ以外にも不具合が生じてい
るかもしれません。

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※


　Cygwin、Linux、FreeBSD 用の Makefile を用意してあります。src/ ディレクトリに
Makefile というファイル名でコピーして make するか、
    make -f ports/Makefile_Cyg_MinGW
のように指定して下さい。

    環境            Makefile
    ----            --------
    Cygwin          Makefile_Cygwin
    Cygwin (MinGW)  Makefile_Cyg_MinGW
    Linux           Makefile_Linux
    FreeBSD         Makefile_FreeBSD


● Windows: Cygwin

　文字コードを gcc で変換するように指定しているので、何もせず make するだけで
通るはずです。

　実行時は cygwin1.dll などの Cygwin の実行環境が必要です。


● Windows: Cygwin -mno-cygwin (WinGW)

　文字コードを gcc で変換するように指定しているので、何もせず make するだけで
通るはずです。

　DLL は不要なので、実行ファイルの配布に向いていると思います。

　なお、MinGW 上でのコンパイルは試していません。


● Linux

※ Ubuntu 10.04 で確認しています。

　文字コードを gcc で変換するように指定しているので、何もせず make するだけで
通るはずです。


● FreeBSD

　version 3.00 発表後に、M.Suzuki 氏から dis を FreeBSD 上でコンパイルするため
の差分を contribute していただき、それを参考にして正式に FreeBSD に対応しまし
た。これにより、FreeBSD 上で Human68k 用のバイナリファイルを逆アセンブルする、
クロス開発環境が実現しています。

　FreeBSD で make するには、あらかじめ nkf などを使用してソースファイルの文字
コードを日本語 EUC に変換して下さい。

　ソースコードでは __HUMAN68K__、__LIBC__、__BIG_ENDIAN__ などの定義を参照して
います。多分 NetBSD でもコンパイルできると思います。

　FreeBSD クロス版の発案は M.Suzuki 氏によるものですが、正式バージョンへの取り
込みは全て TcbnErik によるコーディングなので、何か不具合があれば私の方に連絡願
います。


● OS-9/X680x0

　対応していません。ただし、コンパイルできる環境でマクロ OSKDIS を定義すれば
OS-9/X680x0 用の実行ファイルを逆アセンブルする dis が作成されます。


● それ以外の OS への移植

　以下の調整をして下さい。

・リポジトリにあるソースファイルの文字コードが UTF-8 なので、適宜文字コードを
  変換するか、コンパイラのオプションで指定します。

・M68000 のようなビッグエンディアン環境で、マクロ __BIG_ENDIAN__ が定義されな
  い場合は Makefile で自前で定義します。

・strtox() など、標準的でない関数の有無で Makefile を書き換えます。


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        X680x0/Human68k での再コンパイル方法

───────────────────────────────────────

　完全な再コンパイルには、long double(12バイト)に対応している sprintf() と、文
字列を long double に変換する strtox() が必要です。

　strtox() は HAS の fexpr.s からコードを抜き出すと楽に作れますが、sprintf()
が long double に対応していないと意味がありません。


(1) ライブラリの設定

　Makefile の LIBFLAGS を、持っていないライブラリをリンクしないように修正しま
す。
    libld.a がない場合      -lld を削除します
    libhdi.a 〃             -lhdi 〃
    libhmem.a 〃            -lhmem 〃

　なお、libioctl.a を持っている人は -lioctl を追加するのも良いでしょう。

(2) sprintf() の long double 対応有無

　sprintf() が long double に対応していない場合(LIBC や libhdi は対応していま
せん)は、Makefile の FUNCCFLAGS に -DNO_PRINTF_LDBL を追加します。

(3) strtox() の有無

strtox() がない場合は FUNCCFLAGS から -DHAVE_STRTOX を削除します。

更に、fpconv.c:fpconv_x() の以下の部分を調整します。
    #ifndef HAVE_STRTOX
          || e <= 64                           // ライブラリに依存
    #endif

　ただし、-DNO_PRINTF_LDBL を追加した場合は使わないので、そのままで構いません。

(4) (好みで) ファイル上書き確認時の問い合せ

　標準では Yes/No/Rename 入力後にリターンキーを押さないと続行されません。'y'
キーなどを押しただけで続行したい場合は、Makefile の DEFAULTCFLAGS に
-DQUICK_YES_NO を追加します。

(5) make

　make を実行します。


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
